#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build lede

on:
  # repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH Action'
        required: false
        default: 'false'
  schedule:
    - cron: 00 11 * * * 

env: 
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false

jobs: 
  build:
    runs-on: ubuntu-20.04

    steps:

    - name: Checkout
      uses: actions/checkout@main
      with:
        ref: master
        fetch-depth: 0

    # - name: cache
    #   uses: klever1988/cachewrtbuild@main        
    #   with:
    #     #是否一并缓存.ccache目录，如果你启用了ccache。这是唯一的常用参数，其他三个用于除错，一般不需要调整
    #     ccache: false
    #     #是否缓存工具链目录
    #     toolchain: true
    #     #是否跳过工具链编译
    #     skip: true
    #     #清空缓存
    #     clean: false

    - name: 创建环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo mkdir -p /lede
        sudo chown $USER:$GROUPS /lede

    - name: 下载Lede源码
      working-directory: /lede
      run: |
        git clone https://github.com/Huadao1108/lede.git -b master lede
        ln -sf /lede/lede $GITHUB_WORKSPACE/lede

    - name: 缓存配置
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/lede

    - name: 加载本地配置
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF lede/feeds.conf.default
        cd lede
        # echo 'src-git kenzo https://github.com/kenzok8/openwrt-packages' >>feeds.conf.default
        # echo 'src-git small https://github.com/kenzok8/small' >>feeds.conf.default

    - name: 更新插件库
      run: cd lede && ./scripts/feeds update -a

    - name: 安装插件库
      run: cd lede && ./scripts/feeds install -a
    
    - name: 加载本地配置
      run: |
        [ -e files ] && mv files lede/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE lede/.config
        cd lede
        sed -i 's/10.10.10.2/192.168.50.5/g' package/base-files/files/bin/config_generate

    - name: 编译插件库
      id: package
      run: |
        cd lede
        echo -e 'CONFIG_DEVEL=y\nCONFIG_CCACHE=y' >> .config; make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    # - name: 完成固件
    #   id: compile
    #   run: |
    #     cd lede
    #     echo -e "$(nproc) thread compile"
    #     make -j$(nproc) || make -j1 || make -j1 V=s
    #     echo "::set-output name=status::success"
    #     grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
    #     [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
    #     echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV


    - name: 完成固件
      run: |
        cd lede
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s || make -j1 V=s
        df -h
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin

    - name: Prepare artifact
      run: |
        mkdir -p ./artifact/firmware
        mkdir -p ./artifact/packages
        mkdir -p ./artifact/buildinfo
        ls
        cd lede
        ls
        cp -rf ./bin/targets/ ./artifact/firmware/
        cp -rf ./bin/packages/ ./artifact/packages/
        cp -rf ./bin/targets/ ./artifact/buildinfo/

    - name: Deliver buildinfo
      uses: actions/upload-artifact@v2
      with:
        name: OpenWrt_buildinfo
        path: ./artifact/buildinfo/

    - name: Deliver package
      uses: actions/upload-artifact@v2
      with:
        name: OpenWrt_package
        path: ./artifact/package/

    - name: Deliver firmware
      uses: actions/upload-artifact@v2
      with:
        name: OpenWrt_firmware
        path: ./bin/targets/

    - name: Upload release asset
      if: github.event == 'release'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.YOURTOKEN }}
        file: ./artifact/firmware/*
        tag: ${{ github.ref }}
        file_glob: true

    # - name: 检查存储情况
    #   if: (!cancelled())
    #   run: df -hT

    # - name: Upload bin directory
    #   uses: actions/upload-artifact@main
    #   if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
    #   with:
    #     name: lede_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
    #     path: lede/bin
    #
    # - name: Organize files
    #   id: organize
    #   if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
    #   run: |
    #     cd lede/bin/targets/*/*
    #     rm -rf packages
    #     echo "FIRMWARE=$PWD" >> $GITHUB_ENV
    #     echo "::set-output name=status::success"
        
    # - name: Upload firmware directory
    #   uses: actions/upload-artifact@main
    #   if: steps.organize.outputs.status == 'success' && !cancelled()
    #   with:
    #     name: lede_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
    #     path: ${{ env.FIRMWARE }}

    # - name: Upload firmware to cowtransfer
    #   id: cowtransfer
    #   if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
    #   run: |
    #     curl -fsSL git.io/file-transfer | sh
    #     ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
    #     echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
    #     echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    # - name: Generate release tag
    #   id: tag
    #   if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   run: |
    #     echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
    #     touch release.txt
    #     [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
    #     [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
    #     echo "::set-output name=status::success"
        
    # - name: Upload firmware to release
    #   uses: softprops/action-gh-release@v1
    #   if: steps.tag.outputs.status == 'success' && !cancelled()
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ steps.tag.outputs.release_tag }}
    #     body_path: release.txt
    #     files: ${{ env.FIRMWARE }}/*

    # - name: Delete workflow runs
    #   uses: GitRML/delete-workflow-runs@main
    #   with:
    #     retain_days: 1
    #     keep_minimum_runs: 3

    # - name: Remove old Releases
    #   uses: dev-drprasad/delete-older-releases@v0.1.0
    #   if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   with:
    #     keep_latest: 3
    #     delete_tags: true
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}