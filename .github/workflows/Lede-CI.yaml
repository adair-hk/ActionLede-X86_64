name: 编译OpenWrt系统

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH Action'
        required: false
        default: 'false'
  schedule:
    - cron: 30 4 * * 1,5

env: 
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: 检查
      uses: actions/checkout@main

    - name: 创建环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo apt update -y
        sudo apt full-upgrade -y
        sudo apt install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential \ bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \ git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \ libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \ mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils \ rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /OpenWrt
        sudo chown $USER:$GROUPS /OpenWrt

    - name: 下载Lede源码
      working-directory: /OpenWrt
      run: |
        df -hT $PWD
        ls
        cd /OpenWrt
        ls
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /OepWrt/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载本地文件
      run: |
        cd /OpenWrt/openwrt
        make defconfig
        [ -e $FEEDS_CONF ] && mv -f $FEEDS_CONF feeds.conf.default
        # echo 'src-git kenzo https://github.com/kenzok8/openwrt-packages' >>feeds.conf.default
        # echo 'src-git small https://github.com/kenzok8/small' >>feeds.conf.default

    - name: 更新插件库
      run: cd /OpenWrt/openwrt && ./scripts/feeds update -f -a

    - name: 安装插件库
      run: cd /OpenWrt/openwrt && ./scripts/feeds install -f -a
        
    - name: 覆盖写入配置文件
      run: |
        cd /OpenWrt/openwrt
        [ -e $CONFIG_FILE ] && mv -f $CONFIG_FILE /OpenWrt/openwrt/.config
        cd /OpenWrt/openwrt
        sed -i 's/192.168.1.1/192.168.3.10/g' package/base-files/files/bin/config_generate
        sed -i 's/OpenWrt/Jayha/g' package/base-files/files/bin/config_generate

    - name: 编译插件库
      id: package
      run: |
        cd /OpenWrt/openwrt
        make download -j8 || make download -j1 V=s
        rm -rf $(find ./dl/ -size -1024c)
        df -h

    - name: 完成固件
      run: |
        make -j$(nproc) || make -j1 V=s
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h ./ --max-depth=1
        du -h /mnt/openwrt/ --max-depth=1 || true
        zip -p -r fireware.zip /OpenWrt/openwrt/bin/targets

    - name: 上传固件
      uses: actions/upload-artifact@v3
      with:
        name: OpenWrt_firmware
        path: /OpenWrt/openwrt/bin/targets/fireware.zip

    # - name: Prepare artifact
    #   run: |
    #     mkdir -p ./artifact/firmware
    #     mkdir -p ./artifact/package
    #     mkdir -p ./artifact/buildinfo
    #     rm -rf $(find ./bin/targets/ -type d -name "packages")
    #     cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
    #     cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
    #     cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

    # - name: 上传插件
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: OpenWrt_firmware
    #     path: ./bin/targets/
#     - name: Prepare artifact
#       run: |
#         cd ${{ github.workspace }}/openwrt
#         mkdir -p ${{ github.workspace }}/openwrt/artifact/firmware 
#         mkdir -p ${{ github.workspace }}/openwrt/artifact/packages
#         cp -rf $(find ${{ github.workspace }}/openwrt/bin/targets/* -type f) ./artifact/firmware/
#         cp -rf $(find ${{ github.workspace }}/openwrt/bin/packages/* -type f -name "*.ipk") ./artifact/packages/



